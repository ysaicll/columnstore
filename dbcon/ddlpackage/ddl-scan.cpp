
#line 3 "ddl-scan-temp.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE ddlrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via ddlrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void ddlrestart (FILE *input_file ,yyscan_t yyscanner );
void ddl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE ddl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void ddl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void ddl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void ddlpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void ddlpop_buffer_state (yyscan_t yyscanner );

static void ddlensure_buffer_stack (yyscan_t yyscanner );
static void ddl_load_buffer_state (yyscan_t yyscanner );
static void ddl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER ddl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE ddl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE ddl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE ddl_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *ddlalloc (yy_size_t ,yyscan_t yyscanner );
void *ddlrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void ddlfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer ddl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        ddlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            ddl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        ddlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            ddl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define ddlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 93
#define YY_END_OF_BUFFER 94
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[432] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       94,   93,   89,   88,   91,   13,   91,   91,   91,   16,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   92,
       10,   12,   93,   11,   93,   14,   15,   89,    0,   16,
       89,   17,   17,   16,    0,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   75,   90,   90,   90,
       90,   90,   90,   90,   90,   48,   90,   52,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   65,   90,   90,

       90,   90,   90,    0,   11,    0,   14,   89,   17,    0,
       18,   90,    2,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   29,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   41,
       43,   90,   90,   90,   90,   90,   90,   49,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   61,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   81,   90,   90,    6,   90,   90,
       90,   90,   90,   90,   26,   90,   90,   90,   90,   90,
       34,   90,   90,   90,   90,   37,   90,   90,   90,   90,

       90,   90,   90,   90,   90,   90,   50,   90,   90,   90,
       90,   73,   90,   90,   90,   90,   90,   90,   90,   85,
       90,   90,   90,   90,   90,   69,   90,   90,   90,    3,
       90,   90,   90,   90,   90,   90,    9,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       71,   90,   90,   39,   90,   90,   90,   90,   44,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   63,   90,   90,   90,   90,   90,   90,
       90,   90,   90,    1,   90,    8,   90,   77,   90,   90,
       20,   90,   90,   24,   90,   90,   90,   90,   90,   33,

       72,   35,   76,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   47,   90,   90,   90,   90,   90,   57,   90,
       90,   90,   90,   90,   90,   90,   90,   66,   90,   68,
       90,   90,   90,    5,   90,   74,   21,   19,   90,   90,
       90,   28,   30,   90,   90,   36,   90,   90,   42,   90,
       90,   90,   90,   90,   90,   51,   53,   90,   55,   90,
       90,   90,   90,   90,   90,   64,   90,   90,   90,   90,
       70,   90,   90,   90,   90,   27,   90,   32,   90,   90,
       83,   87,   45,   90,   90,   46,   90,   90,   58,   90,
       62,   90,   80,   84,   78,   67,   90,   90,    7,   90,

       90,   90,   38,   40,   90,   90,   54,   90,   90,   90,
       79,   90,   22,   90,   31,   82,   86,   56,   90,   90,
       90,   23,   90,   90,   60,   90,   25,   59,   90,    4,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    5,    6,    1,    7,    8,
        9,    6,   10,    6,   11,   12,    6,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    6,    6,    6,
        6,    6,    1,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   23,
        6,    1,    6,    6,   39,   40,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   23,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   23,    1,    1,    1,    1,    1,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    1,    2,    2,    3,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[439] =
    {   0,
        0,    0,   57,   59,  627,  559,  458,  370,  224,  211,
      200,  882,   67,   70,  882,  882,   63,   66,  155,   68,
       66,   63,  113,   75,   65,   70,    0,   96,   66,   71,
      117,  109,   80,  124,  101,  134,  185,  151,  136,  882,
      882,  882,  148,  882,  149,  882,  882,  172,  140,  172,
        0,  146,  169,  176,  182,    0,  163,  180,  168,  169,
      185,  182,  179,  205,  218,  190,  181,  182,  232,  195,
      205,  200,  203,  212,  222,  229,    0,  230,  241,  222,
      234,  235,  232,  235,  247,  234,  270,    0,  242,  259,
      270,  273,  251,  269,  288,  270,  282,    0,  276,  292,

      295,  295,  286,  142,  882,  133,  882,    0,  302,  123,
       95,  296,    0,  301,  297,  304,  314,  318,  311,  328,
      303,  322,  317,  338,  323,  337,  335,  344,  341,  345,
      336,  344,  337,  353,  352,  347,  355,  358,  345,  363,
        0,  363,  372,   66,  368,   62,  370,    0,  371,  381,
      368,  386,  379,  381,  389,  395,  378,  380,    0,  388,
      381,  391,  385,  382,  394,  393,  402,  411,  397,  440,
      405,  404,   58,  414,    0,  416,  423,  431,  424,  424,
      435,  425,  427,  446,  429,  440,  434,  438,  438,  448,
        0,  448,  444,  445,  457,    0,  464,  448,  465,  470,

      483,  472,  465,  466,  471,  486,    0,  476,  487,  488,
      498,    0,  484,  492,  488,  491,  496,  505,  506,    0,
      516,  511,  495,  510,  501,    0,  513,  522,  519,    0,
      530,  515,  536,  538,  543,  543,    0,  536,  537,  535,
      549,  542,  549,  559,  551,  546,  560,  563,  564,  552,
        0,  565,  565,    0,  577,  575,  571,  579,    0,  571,
      575,  576,  568,  585,  597,  581,  584,  598,  599,  597,
      593,  601,  600,    0,  603,  602,  613,  619,  617,  610,
      622,  615,  631,    0,  621,    0,  631,    0,  618,  620,
      624,  624,  645,    0,  628,  638,  640,  633,  655,    0,

        0,    0,    0,  644,  661,  653,  649,  653,  647,  649,
      679,  652,    0,  673,  668,  673,  660,  672,    0,  685,
      676,  678,   57,  680,  676,  676,  682,    0,  699,    0,
      704,  689,  707,    0,  708,    0,    0,    0,  705,   55,
      712,    0,    0,  717,  716,    0,  703,  712,    0,  725,
      709,  711,  722,  730,  719,    0,    0,  724,    0,  733,
      722,   51,  723,  724,  746,    0,  731,  747,  749,  739,
        0,  740,  741,  747,  745,    0,  755,    0,  765,  747,
        0,    0,    0,  758,  750,    0,  762,  773,    0,  760,
        0,  763,    0,    0,    0,    0,  761,  783,    0,  770,

      772,  789,    0,    0,  793,  781,    0,  784,  785,  791,
        0,  793,  790,  805,    0,    0,    0,    0,  806,  795,
      809,    0,  800,  801,    0,  806,    0,    0,  804,    0,
      882,  863,  866,  869,   84,  872,  875,  878
    } ;

static yyconst flex_int16_t yy_def[439] =
    {   0,
      431,    1,  432,  432,  433,  433,  434,  434,  432,  432,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  431,
      431,  431,  436,  431,  437,  431,  431,  431,  431,  431,
      438,  431,  431,  431,  431,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,

      435,  435,  435,  436,  431,  437,  431,  438,  431,  431,
      431,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,

      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,

      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,

      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
        0,  431,  431,  431,  431,  431,  431,  431
    } ;

static yyconst flex_int16_t yy_nxt[947] =
    {   0,
       12,   13,   14,   13,   12,   15,   16,   15,   15,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       27,   28,   27,   29,   30,   31,   32,   33,   34,   27,
       35,   36,   37,   38,   39,   27,   27,   27,   27,   40,
       21,   22,   23,   24,   25,   26,   27,   27,   28,   29,
       30,   31,   32,   33,   34,   27,   35,   36,   37,   38,
       39,   27,   27,   27,   41,   42,   41,   42,   48,   48,
       48,   48,   48,   48,   49,   50,   51,   49,   50,   53,
       54,   57,   58,   80,   61,   55,   56,   62,   68,  390,
       59,   72,   69,  375,   74,  364,  231,   75,   81,   60,

      205,   73,   70,   76,  203,   71,   88,  111,   57,   58,
       80,   61,   55,   62,   77,   68,   59,   72,   91,   69,
       74,   78,   79,   75,   81,   60,   63,   73,   70,   76,
       82,   71,   88,   64,   83,  111,   86,   89,   84,  107,
       65,   77,   87,   66,   85,   91,   67,   78,   79,  103,
      105,   92,   52,   63,   90,  107,  105,   82,   52,   93,
       64,   83,   86,   55,   89,   84,   65,   52,   87,   66,
       85,   94,   67,   48,   48,   48,  103,  100,   92,  101,
       90,  109,  102,   49,   50,   93,   55,   53,   54,   55,
       55,  110,  110,   55,  111,  112,  113,   94,   95,  431,

      114,  115,   96,  100,  116,  101,   97,  124,  102,  117,
      118,  125,   98,   55,  126,   99,   55,   47,  119,  132,
       55,  112,  120,  113,  133,   95,  114,  115,  130,   96,
       47,  116,  131,   97,  124,  117,  118,  125,   98,  134,
      126,   99,  121,  122,  123,  119,  132,  127,  145,  120,
      128,  133,  135,  136,  130,  137,  129,  138,  131,  141,
      142,  146,  139,  147,  160,  134,  148,  143,  121,  122,
      123,  144,  151,  140,  127,  145,  152,  128,  135,  136,
      153,  137,  129,  154,  138,  141,  142,  146,  155,  139,
      147,  160,  148,  143,  149,  150,  156,  144,  151,  140,

      161,  157,  162,  152,  158,  159,  163,  153,  164,  165,
      154,  168,  169,  166,  109,  155,  170,  171,  172,   55,
      149,  150,  156,  167,  173,  174,  161,  157,  175,  162,
      158,  159,  163,  176,  164,  165,  180,  177,  168,  169,
      166,  178,  170,  179,  171,  172,   55,  181,  182,  167,
      173,  183,  174,  184,  185,  175,  186,  187,  189,  190,
      176,  188,  180,  177,  191,  192,  194,  178,  193,  195,
      179,  196,  197,  181,  182,  198,   46,  199,  183,  184,
      200,  185,  201,  186,  187,  189,  190,  202,  188,  204,
      191,  206,  192,  194,  193,  207,  195,  196,  208,  197,

      209,  210,  198,  199,  211,  212,  213,  200,  214,  201,
      215,  216,  217,  218,  202,  219,  204,  220,  206,  221,
      222,  207,  223,  224,  225,  208,  209,  226,  210,  233,
      211,  212,  229,  213,  230,  214,  215,  216,  217,  218,
      232,  219,  234,  220,  235,  221,  222,  237,  223,  238,
      224,  225,  239,  226,  227,  228,  233,  240,  229,  241,
      230,  243,  236,  242,   46,  244,  232,  245,  246,  234,
      247,  235,  248,  237,  249,  238,  250,  251,  252,  239,
      253,  227,  228,  240,  254,  241,  255,  243,  236,  256,
      242,  244,  259,  245,  246,  260,  247,  257,  248,  261,

      249,  262,  250,  251,  263,  252,  264,  253,  265,  266,
      254,  267,  271,  255,  268,  258,  256,  269,  270,  259,
      272,  260,  273,  274,  257,  261,  278,  262,  279,  280,
      275,  263,  264,  281,  282,  265,  266,  276,  267,  271,
      268,  258,  283,  269,  270,  284,  272,  286,  277,  273,
      274,  285,  287,  278,  279,  288,  280,  275,  289,  281,
      290,  282,  291,  292,  276,  293,  294,   44,  295,  283,
      296,  284,  297,  286,  277,  298,  299,  300,  285,  287,
      301,  302,  288,  303,  304,  289,  305,  290,  291,  292,
      306,  293,  307,  294,  295,  308,  309,  296,  310,  297,

      311,  298,  299,  312,  300,  313,  314,  301,  302,  303,
      315,  304,  316,  305,  317,  318,  319,  306,  320,  307,
      321,  308,  322,  309,  310,  323,  311,  324,  325,  312,
      326,  313,  327,  314,  328,   44,  329,  315,  316,  330,
      317,  331,  318,  319,  332,  320,  321,  333,  334,  322,
      335,  323,  336,  324,  325,  337,  338,  326,  339,  327,
      340,  328,  329,  341,  342,  343,  330,  331,  344,  431,
      346,  332,  345,  333,  347,  334,  335,  348,  336,  349,
      350,  337,  338,  351,  352,  339,  340,  355,  356,  341,
      342,  343,  357,  353,  358,  344,  346,  359,  360,  345,

      361,  347,  362,  348,  363,  349,  350,  365,  366,  351,
      352,  354,  367,  355,  368,  356,  369,  370,  357,  371,
      353,  358,  372,  359,  360,  373,  374,  361,  362,  376,
      363,  377,  378,  365,  366,  379,  380,  354,  367,  381,
      368,  382,  383,  369,  370,  371,  384,  385,  388,  372,
      386,  387,  373,  374,  389,  391,  376,  392,  377,  378,
      393,  379,  380,  394,  395,  396,  381,  382,  383,  397,
      398,  399,  384,  400,  385,  388,  386,  387,  401,  402,
      389,  391,  403,  392,  404,  405,  406,  393,  407,  394,
      408,  395,  396,  409,  410,  397,  398,  399,  411,  400,

      412,  431,  413,  414,  401,  402,  415,  416,  420,  403,
      404,  405,  406,  417,  407,  418,  419,  408,  421,  409,
      410,  422,  423,  424,  411,  425,  426,  412,  413,  414,
      427,  428,  429,  415,  416,  420,  430,  431,  431,  417,
      431,  418,  419,  431,  421,  431,  431,  422,  431,  423,
      424,  425,  431,  426,  431,  431,  427,  428,  429,  431,
      431,  431,  430,   12,   12,   12,   43,   43,   43,   45,
       45,   45,  104,  104,  104,  106,  106,  106,  108,  431,
      108,   11,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,

      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431
    } ;

static yyconst flex_int16_t yy_chk[947] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    3,    4,    4,   13,   13,
       13,   14,   14,   14,   17,   17,   18,   18,   18,   20,
       20,   21,   21,   29,   22,   20,  435,   22,   24,  362,
       21,   25,   24,  340,   26,  323,  173,   26,   30,   21,

      146,   25,   24,   26,  144,   24,   33,  111,   21,   21,
       29,   22,   20,   22,   28,   24,   21,   25,   35,   24,
       26,   28,   28,   26,   30,   21,   23,   25,   24,   26,
       31,   24,   33,   23,   31,  110,   32,   34,   31,  106,
       23,   28,   32,   23,   31,   35,   23,   28,   28,   39,
      104,   36,   49,   23,   34,   45,   43,   31,   52,   36,
       23,   31,   32,   52,   34,   31,   23,   19,   32,   23,
       31,   36,   23,   48,   48,   48,   39,   38,   36,   38,
       34,   53,   38,   50,   50,   36,   53,   54,   54,   50,
       52,   55,   55,   54,   55,   57,   58,   36,   37,   11,

       59,   60,   37,   38,   61,   38,   37,   66,   38,   62,
       63,   67,   37,   53,   68,   37,   50,   10,   64,   72,
       54,   57,   64,   58,   73,   37,   59,   60,   70,   37,
        9,   61,   71,   37,   66,   62,   63,   67,   37,   74,
       68,   37,   65,   65,   65,   64,   72,   69,   83,   64,
       69,   73,   75,   76,   70,   78,   69,   79,   71,   80,
       81,   84,   79,   85,   93,   74,   86,   82,   65,   65,
       65,   82,   89,   79,   69,   83,   90,   69,   75,   76,
       90,   78,   69,   91,   79,   80,   81,   84,   91,   79,
       85,   93,   86,   82,   87,   87,   91,   82,   89,   79,

       94,   91,   95,   90,   92,   92,   96,   90,   97,   99,
       91,  101,  102,  100,  109,   91,  103,  112,  114,  109,
       87,   87,   91,  100,  115,  116,   94,   91,  117,   95,
       92,   92,   96,  118,   97,   99,  121,  119,  101,  102,
      100,  119,  103,  120,  112,  114,  109,  122,  123,  100,
      115,  124,  116,  125,  126,  117,  127,  128,  129,  130,
      118,  128,  121,  119,  131,  132,  134,  119,  133,  135,
      120,  136,  137,  122,  123,  138,    8,  139,  124,  125,
      140,  126,  142,  127,  128,  129,  130,  143,  128,  145,
      131,  147,  132,  134,  133,  149,  135,  136,  150,  137,

      151,  152,  138,  139,  153,  154,  155,  140,  156,  142,
      157,  158,  160,  161,  143,  162,  145,  163,  147,  164,
      165,  149,  166,  167,  168,  150,  151,  169,  152,  176,
      153,  154,  171,  155,  172,  156,  157,  158,  160,  161,
      174,  162,  177,  163,  178,  164,  165,  179,  166,  180,
      167,  168,  181,  169,  170,  170,  176,  182,  171,  183,
      172,  185,  178,  184,    7,  186,  174,  187,  188,  177,
      189,  178,  190,  179,  192,  180,  193,  194,  195,  181,
      197,  170,  170,  182,  198,  183,  199,  185,  178,  200,
      184,  186,  202,  187,  188,  203,  189,  201,  190,  204,

      192,  205,  193,  194,  206,  195,  208,  197,  209,  210,
      198,  211,  216,  199,  213,  201,  200,  214,  215,  202,
      217,  203,  218,  219,  201,  204,  222,  205,  223,  224,
      221,  206,  208,  225,  227,  209,  210,  221,  211,  216,
      213,  201,  228,  214,  215,  229,  217,  232,  221,  218,
      219,  231,  233,  222,  223,  234,  224,  221,  235,  225,
      236,  227,  238,  239,  221,  240,  241,    6,  242,  228,
      243,  229,  244,  232,  221,  245,  246,  247,  231,  233,
      248,  249,  234,  250,  252,  235,  253,  236,  238,  239,
      255,  240,  256,  241,  242,  257,  258,  243,  260,  244,

      261,  245,  246,  262,  247,  263,  264,  248,  249,  250,
      265,  252,  266,  253,  267,  268,  269,  255,  270,  256,
      271,  257,  272,  258,  260,  273,  261,  275,  276,  262,
      277,  263,  278,  264,  279,    5,  280,  265,  266,  281,
      267,  282,  268,  269,  283,  270,  271,  285,  287,  272,
      289,  273,  290,  275,  276,  291,  292,  277,  293,  278,
      295,  279,  280,  296,  297,  298,  281,  282,  299,    0,
      304,  283,  299,  285,  305,  287,  289,  306,  290,  307,
      308,  291,  292,  309,  310,  293,  295,  312,  314,  296,
      297,  298,  315,  311,  316,  299,  304,  317,  318,  299,

      320,  305,  321,  306,  322,  307,  308,  324,  325,  309,
      310,  311,  326,  312,  327,  314,  329,  331,  315,  332,
      311,  316,  333,  317,  318,  335,  339,  320,  321,  341,
      322,  344,  345,  324,  325,  347,  348,  311,  326,  350,
      327,  351,  352,  329,  331,  332,  353,  354,  360,  333,
      355,  358,  335,  339,  361,  363,  341,  364,  344,  345,
      365,  347,  348,  367,  368,  369,  350,  351,  352,  370,
      372,  373,  353,  374,  354,  360,  355,  358,  375,  377,
      361,  363,  379,  364,  380,  384,  385,  365,  387,  367,
      388,  368,  369,  390,  392,  370,  372,  373,  397,  374,

      398,    0,  400,  401,  375,  377,  402,  405,  410,  379,
      380,  384,  385,  406,  387,  408,  409,  388,  412,  390,
      392,  413,  414,  419,  397,  420,  421,  398,  400,  401,
      423,  424,  426,  402,  405,  410,  429,    0,    0,  406,
        0,  408,  409,    0,  412,    0,    0,  413,    0,  414,
      419,  420,    0,  421,    0,    0,  423,  424,  426,    0,
        0,    0,  429,  432,  432,  432,  433,  433,  433,  434,
      434,  434,  436,  436,  436,  437,  437,  437,  438,    0,
      438,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,

      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
/* Copyright (C) 2014 InfiniDB, Inc.
   Copyright (C) 2016 MariaDB Corporation

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; version 2 of
   the License.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   MA 02110-1301, USA. */
/* $Id: ddl.l 9341 2013-03-27 14:10:35Z chao $ */
#include <iostream>
#include <vector>
#include <stdio.h>
#include "sqlparser.h"
#include "ddlpkg.h"

#ifdef _MSC_VER
#include "ddl-gram-win.h"
#else
#include "ddl-gram.h"
#endif

using namespace ddlpackage;
int lineno = 1;
void ddlerror(struct pass_to_bison* x, char const *s);

static char* scanner_copy(char *str, yyscan_t yyscanner);

/* %option header-file="ddl-scan.h" */

#define INITIAL 0
#define check1 1
#define check2 2
#define inquote 3
#define endquote 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int ddllex_init (yyscan_t* scanner);

int ddllex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int ddllex_destroy (yyscan_t yyscanner );

int ddlget_debug (yyscan_t yyscanner );

void ddlset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE ddlget_extra (yyscan_t yyscanner );

void ddlset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *ddlget_in (yyscan_t yyscanner );

void ddlset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *ddlget_out (yyscan_t yyscanner );

void ddlset_out  (FILE * out_str ,yyscan_t yyscanner );

int ddlget_leng (yyscan_t yyscanner );

char *ddlget_text (yyscan_t yyscanner );

int ddlget_lineno (yyscan_t yyscanner );

void ddlset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * ddlget_lval (yyscan_t yyscanner );

void ddlset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int ddlwrap (yyscan_t yyscanner );
#else
extern int ddlwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		unsigned n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int ddllex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int ddllex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			ddlensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				ddl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		ddl_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 432 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 882 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{return ACTION;}
	YY_BREAK
case 2:
YY_RULE_SETUP
{return ADD;}
	YY_BREAK
case 3:
YY_RULE_SETUP
{return ALTER;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{return AUTO_INCREMENT;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{return CASCADE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{return IDB_CHAR;}
	YY_BREAK
case 7:
YY_RULE_SETUP
{return IDB_CHAR;}
	YY_BREAK
case 8:
YY_RULE_SETUP
{return BIGINT;}
	YY_BREAK
case 9:
YY_RULE_SETUP
{BEGIN(check1);return CHECK;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{BEGIN(check2); return '(';}
	YY_BREAK
case 11:
/* rule 11 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{BEGIN(check1); ddlget_lval(yyscanner)->str = scanner_copy(ddlget_text(yyscanner), yyscanner); return CP_SEARCH_CONDITION_TEXT;}
	YY_BREAK
case 12:
YY_RULE_SETUP
{BEGIN(0); return ')';}
	YY_BREAK
case 13:
YY_RULE_SETUP
{BEGIN(inquote);return yytext[0];}
	YY_BREAK
case 14:
/* rule 14 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{BEGIN(endquote); ddlget_lval(yyscanner)->str = scanner_copy(ddlget_text(yyscanner), yyscanner); return SCONST;}
	YY_BREAK
case 15:
YY_RULE_SETUP
{BEGIN(0); return yytext[0];}
	YY_BREAK
case 16:
YY_RULE_SETUP
{ddlget_lval(yyscanner)->str = scanner_copy(ddlget_text(yyscanner), yyscanner); return ICONST;}
	YY_BREAK
case 17:
YY_RULE_SETUP
{ddlget_lval(yyscanner)->str = scanner_copy(ddlget_text(yyscanner), yyscanner); return FCONST;}
	YY_BREAK
case 18:
YY_RULE_SETUP
{ddlget_lval(yyscanner)->str = scanner_copy(ddlget_text(yyscanner), yyscanner); return FCONST;}
	YY_BREAK
case 19:
YY_RULE_SETUP
{return COMMENT;}
	YY_BREAK
case 20:
YY_RULE_SETUP
{return COLUMN;}
	YY_BREAK
case 21:
YY_RULE_SETUP
{return COLUMNS;}
	YY_BREAK
case 22:
YY_RULE_SETUP
{return CONSTRAINT;}
	YY_BREAK
case 23:
YY_RULE_SETUP
{return CONSTRAINTS;}
	YY_BREAK
case 24:
YY_RULE_SETUP
{return CREATE;}
	YY_BREAK
case 25:
YY_RULE_SETUP
{return CURRENT_USER;}
	YY_BREAK
case 26:
YY_RULE_SETUP
{ddlget_lval(yyscanner)->str=strdup("date"); return DATE;}
	YY_BREAK
case 27:
YY_RULE_SETUP
{return DATETIME;}
	YY_BREAK
case 28:
YY_RULE_SETUP
{return DECIMAL;}
	YY_BREAK
case 29:
YY_RULE_SETUP
{return DECIMAL;}
	YY_BREAK
case 30:
YY_RULE_SETUP
{return DEFAULT;}
	YY_BREAK
case 31:
YY_RULE_SETUP
{return DEFERRABLE;}
	YY_BREAK
case 32:
YY_RULE_SETUP
{return DEFERRED;}
	YY_BREAK
case 33:
YY_RULE_SETUP
{return IDB_DELETE;}
	YY_BREAK
case 34:
YY_RULE_SETUP
{return DROP;}
	YY_BREAK
case 35:
YY_RULE_SETUP
{return ENGINE;}
	YY_BREAK
case 36:
YY_RULE_SETUP
{return FOREIGN;}
	YY_BREAK
case 37:
YY_RULE_SETUP
{return FULL;}
	YY_BREAK
case 38:
YY_RULE_SETUP
{return IMMEDIATE;}
	YY_BREAK
case 39:
YY_RULE_SETUP
{return INDEX;}
	YY_BREAK
case 40:
YY_RULE_SETUP
{return INITIALLY;}
	YY_BREAK
case 41:
YY_RULE_SETUP
{return IDB_INT;}
	YY_BREAK
case 42:
YY_RULE_SETUP
{return INTEGER;}
	YY_BREAK
case 43:
YY_RULE_SETUP
{return KEY;}
	YY_BREAK
case 44:
YY_RULE_SETUP
{return MATCH;}
	YY_BREAK
case 45:
YY_RULE_SETUP
{return MAX_ROWS;}
	YY_BREAK
case 46:
YY_RULE_SETUP
{return MIN_ROWS;}
	YY_BREAK
case 47:
YY_RULE_SETUP
{return MODIFY;}
	YY_BREAK
case 48:
YY_RULE_SETUP
{return NO;}
	YY_BREAK
case 49:
YY_RULE_SETUP
{return NOT;}
	YY_BREAK
case 50:
YY_RULE_SETUP
{return NULL_TOK;}
	YY_BREAK
case 51:
YY_RULE_SETUP
{return NUMERIC;}
	YY_BREAK
case 52:
YY_RULE_SETUP
{return ON;}
	YY_BREAK
case 53:
YY_RULE_SETUP
{return PARTIAL;}
	YY_BREAK
case 54:
YY_RULE_SETUP
{return PRECISION;}
	YY_BREAK
case 55:
YY_RULE_SETUP
{return PRIMARY;}
	YY_BREAK
case 56:
YY_RULE_SETUP
{return REFERENCES;}
	YY_BREAK
case 57:
YY_RULE_SETUP
{return RENAME;}
	YY_BREAK
case 58:
YY_RULE_SETUP
{return RESTRICT;}
	YY_BREAK
case 59:
YY_RULE_SETUP
{return SESSION_USER;}
	YY_BREAK
case 60:
YY_RULE_SETUP
{return SYSTEM_USER;}
	YY_BREAK
case 61:
YY_RULE_SETUP
{return SET;}
	YY_BREAK
case 62:
YY_RULE_SETUP
{return SMALLINT;}
	YY_BREAK
case 63:
YY_RULE_SETUP
{return TABLE;}
	YY_BREAK
case 64:
YY_RULE_SETUP
{return TINYINT;}
	YY_BREAK
case 65:
YY_RULE_SETUP
{return TO;}
	YY_BREAK
case 66:
YY_RULE_SETUP
{return UNIQUE;}
	YY_BREAK
case 67:
YY_RULE_SETUP
{return UNSIGNED;}
	YY_BREAK
case 68:
YY_RULE_SETUP
{return UPDATE;}
	YY_BREAK
case 69:
YY_RULE_SETUP
{return USER;}
	YY_BREAK
case 70:
YY_RULE_SETUP
{return VARCHAR;}
	YY_BREAK
case 71:
YY_RULE_SETUP
{return IDB_FLOAT;}
	YY_BREAK
case 72:
YY_RULE_SETUP
{return DOUBLE;}
	YY_BREAK
case 73:
YY_RULE_SETUP
{return REAL;}
	YY_BREAK
case 74:
YY_RULE_SETUP
{return CHARSET;}
	YY_BREAK
case 75:
YY_RULE_SETUP
{return IDB_IF;}
	YY_BREAK
case 76:
YY_RULE_SETUP
{return EXISTS;}
	YY_BREAK
case 77:
YY_RULE_SETUP
{return CHANGE;}
	YY_BREAK
case 78:
YY_RULE_SETUP
{return TRUNCATE;}
	YY_BREAK
case 79:
YY_RULE_SETUP
{return VARBINARY;}
	YY_BREAK
case 80:
YY_RULE_SETUP
{return TINYBLOB;}
	YY_BREAK
case 81:
YY_RULE_SETUP
{return BLOB;}
	YY_BREAK
case 82:
YY_RULE_SETUP
{return MEDIUMBLOB;}
	YY_BREAK
case 83:
YY_RULE_SETUP
{return LONGBLOB;}
	YY_BREAK
case 84:
YY_RULE_SETUP
{return TINYTEXT;}
	YY_BREAK
case 85:
YY_RULE_SETUP
{return TEXT;}
	YY_BREAK
case 86:
YY_RULE_SETUP
{return MEDIUMTEXT;}
	YY_BREAK
case 87:
YY_RULE_SETUP
{return LONGTEXT;}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
{ lineno++;}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
{
    /* ignore */
}
	YY_BREAK
case 90:
YY_RULE_SETUP
{ddlget_lval(yyscanner)->str = scanner_copy(ddlget_text(yyscanner), yyscanner); return IDENT;}
	YY_BREAK
case 91:
YY_RULE_SETUP
{
    return ddlget_text(yyscanner)[0];
}
	YY_BREAK
case 92:
YY_RULE_SETUP
{
    /* ignore */
}
	YY_BREAK
case 93:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(check1):
case YY_STATE_EOF(check2):
case YY_STATE_EOF(inquote):
case YY_STATE_EOF(endquote):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * ddllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( ddlwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of ddllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					ddlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			ddlrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) ddlrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 432 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 432 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 431);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					ddlrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( ddlwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void ddlrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        ddlensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            ddl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	ddl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	ddl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void ddl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		ddlpop_buffer_state();
	 *		ddlpush_buffer_state(new_buffer);
     */
	ddlensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	ddl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (ddlwrap()) processing, but the only time this flag
	 * is looked at is after ddlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void ddl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE ddl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) ddlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in ddl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) ddlalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in ddl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	ddl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with ddl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void ddl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		ddlfree((void *) b->yy_ch_buf ,yyscanner );

	ddlfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a ddlrestart() or at EOF.
 */
    static void ddl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	ddl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then ddl_init_buffer was _probably_
     * called from ddlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void ddl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		ddl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void ddlpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	ddlensure_buffer_stack(yyscanner);

	/* This block is copied from ddl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from ddl_switch_to_buffer. */
	ddl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void ddlpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	ddl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		ddl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void ddlensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)ddlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in ddlensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)ddlrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in ddlensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE ddl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) ddlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in ddl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	ddl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to ddllex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       ddl_scan_bytes() instead.
 */
YY_BUFFER_STATE ddl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return ddl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to ddllex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE ddl_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) ddlalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in ddl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = ddl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in ddl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE ddlget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int ddlget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int ddlget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *ddlget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *ddlget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int ddlget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *ddlget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void ddlset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void ddlset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "ddlset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void ddlset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "ddlset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see ddl_switch_to_buffer
 */
void ddlset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void ddlset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int ddlget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void ddlset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * ddlget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void ddlset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* ddllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int ddllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) ddlalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* ddllex_init_extra has the same functionality as ddllex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to ddlalloc in
 * the yyextra field.
 */

int ddllex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    ddlset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) ddlalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    ddlset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from ddllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * ddllex_init()
     */
    return 0;
}

/* ddllex_destroy is for both reentrant and non-reentrant scanners. */
int ddllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		ddl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		ddlpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	ddlfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        ddlfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * ddllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    ddlfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *ddlalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *ddlrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void ddlfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see ddlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

void ddlerror(struct pass_to_bison* x, char const *s)
{
	printf("yyerror: %d: %s at %s\n", lineno, s, ddlget_text(x->scanner));
}

typedef std::vector<char*> valbuf_t;

#include <pthread.h>
using namespace ddlpackage;

/*
 * Called before any actual parsing is done
 */
void scanner_init(const char* str, yyscan_t yyscanner)
{
	size_t slen = strlen(str);
   scan_data* pScanData = (scan_data*)ddlget_extra(yyscanner);

	/*
	 * Might be left over after ereport()
	 */
   struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; // needed for macro YY_CURRENT_BUFFER
	if (YY_CURRENT_BUFFER)
      ddl_delete_buffer(YY_CURRENT_BUFFER,yyscanner);

	/*
	 * Make a scan buffer with special termination needed by flex.
	 */
   pScanData->scanbuf =  (char *)malloc(slen + 2);
   memcpy(pScanData->scanbuf, str, slen);
	pScanData->scanbuf[slen] = pScanData->scanbuf[slen + 1] = YY_END_OF_BUFFER_CHAR;
	pScanData->scanbufhandle = (void*)ddl_scan_buffer(pScanData->scanbuf,slen + 2,yyscanner);
	//std::cout << "scanner_init " << (uint64_t)pScanData->scanbufhandle << std::endl;

	BEGIN(INITIAL);

   pScanData->valbuf.clear();
}

/*
 * Called after parsing is done to clean up after scanner_init()
 */

void scanner_finish(yyscan_t yyscanner)
{
   char* str;
   scan_data* pScanData = (scan_data*)ddlget_extra(yyscanner);
	//std::cout << "scanner_finish " << (uint64_t)pScanData->scanbufhandle << std::endl;
   ddl_delete_buffer((YY_BUFFER_STATE)pScanData->scanbufhandle,yyscanner);
   free(pScanData->scanbuf);
   unsigned int i;
   for(i=0; i<pScanData->valbuf.size(); i++) {
      str = pScanData->valbuf[i];
      if(str) {
//        std::cout << "valbuf:(" << str << ")" << std::endl;
         free(pScanData->valbuf[i]);
      }
   }
   pScanData->valbuf.clear();
}

char* scanner_copy (char *str, yyscan_t yyscanner)
{
   char* nv = strdup(str);
   if(nv)
      ((scan_data*)ddlget_extra(yyscanner))->valbuf.push_back(nv);
   return nv;
}

